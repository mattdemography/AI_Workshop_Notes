
!pip install --user seaborn
Collecting seaborn
  Downloading https://files.pythonhosted.org/packages/a8/76/220ba4420459d9c4c9c9587c6ce607bf56c25b3d3d2de62056efe482dadc/seaborn-0.9.0-py3-none-any.whl (208kB)
    100% |████████████████████████████████| 215kB 5.6MB/s ta 0:00:01   34% |███████████                     | 71kB 3.3MB/s eta 0:00:01
Requirement already satisfied: scipy>=0.14.0 in /home/student/.local/lib/python3.5/site-packages (from seaborn) (1.1.0)
Requirement already satisfied: numpy>=1.9.3 in /home/student/.local/lib/python3.5/site-packages (from seaborn) (1.15.0)
Requirement already satisfied: matplotlib>=1.4.3 in /home/student/.local/lib/python3.5/site-packages (from seaborn) (2.2.2)
Requirement already satisfied: pandas>=0.15.2 in /home/student/.local/lib/python3.5/site-packages (from seaborn) (0.23.1)
Requirement already satisfied: kiwisolver>=1.0.1 in /home/student/.local/lib/python3.5/site-packages (from matplotlib>=1.4.3->seaborn) (1.0.1)
Requirement already satisfied: pyparsing!=2.0.4,!=2.1.2,!=2.1.6,>=2.0.1 in /home/student/.local/lib/python3.5/site-packages (from matplotlib>=1.4.3->seaborn) (2.2.0)
Requirement already satisfied: python-dateutil>=2.1 in /home/student/.local/lib/python3.5/site-packages (from matplotlib>=1.4.3->seaborn) (2.7.3)
Requirement already satisfied: pytz in /home/student/.local/lib/python3.5/site-packages (from matplotlib>=1.4.3->seaborn) (2018.4)
Requirement already satisfied: six>=1.10 in /home/student/.local/lib/python3.5/site-packages (from matplotlib>=1.4.3->seaborn) (1.11.0)
Requirement already satisfied: cycler>=0.10 in /home/student/.local/lib/python3.5/site-packages (from matplotlib>=1.4.3->seaborn) (0.10.0)
Requirement already satisfied: setuptools in /home/student/.local/lib/python3.5/site-packages (from kiwisolver>=1.0.1->matplotlib>=1.4.3->seaborn) (40.0.0)
Installing collected packages: seaborn
Successfully installed seaborn-0.9.0

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
%matplotlib inline 
/usr/lib/python3.5/importlib/_bootstrap.py:222: RuntimeWarning: numpy.dtype size changed, may indicate binary incompatibility. Expected 96, got 88
  return f(*args, **kwds)
/usr/lib/python3.5/importlib/_bootstrap.py:222: RuntimeWarning: numpy.dtype size changed, may indicate binary incompatibility. Expected 96, got 88
  return f(*args, **kwds)
/usr/lib/python3.5/importlib/_bootstrap.py:222: RuntimeWarning: numpy.dtype size changed, may indicate binary incompatibility. Expected 96, got 88
  return f(*args, **kwds)

df = pd.read_csv("clean_df.csv")

print(df.head())
df.dtypes
   Unnamed: 0  symboling  normalized-losses         make fuel-type aspiration  \
0           0          3                122  alfa-romero       gas        std   
1           1          3                122  alfa-romero       gas        std   
2           2          1                122  alfa-romero       gas        std   
3           3          2                164         audi       gas        std   
4           4          2                164         audi       gas        std   

  num-of-doors   body-style drive-wheels engine-location      ...       \
0          two  convertible          rwd           front      ...        
1          two  convertible          rwd           front      ...        
2          two    hatchback          rwd           front      ...        
3         four        sedan          fwd           front      ...        
4         four        sedan          4wd           front      ...        

   fuel-system  bore  stroke  compression-ratio  horsepower peak-rpm city-mpg  \
0         mpfi  3.47    2.68                9.0       111.0   5000.0       21   
1         mpfi  3.47    2.68                9.0       111.0   5000.0       21   
2         mpfi  2.68    3.47                9.0       154.0   5000.0       19   
3         mpfi  3.19    3.40               10.0       102.0   5500.0       24   
4         mpfi  3.19    3.40                8.0       115.0   5500.0       18   

   highway-mpg    price  city-L/100km  
0           27  13495.0     11.190476  
1           27  16500.0     11.190476  
2           26  16500.0     12.368421  
3           30  13950.0      9.791667  
4           22  17450.0     13.055556  

[5 rows x 28 columns]
Unnamed: 0             int64
symboling              int64
normalized-losses      int64
make                  object
fuel-type             object
aspiration            object
num-of-doors          object
body-style            object
drive-wheels          object
engine-location       object
wheel-base           float64
length               float64
width                float64
height               float64
curb-weight            int64
engine-type           object
num-of-cylinders      object
engine-size            int64
fuel-system           object
bore                 float64
stroke               float64
compression-ratio    float64
horsepower           float64
peak-rpm             float64
city-mpg               int64
highway-mpg            int64
price                float64
city-L/100km         float64
dtype: object
Visualization

df.dtypes
Unnamed: 0             int64
symboling              int64
normalized-losses      int64
make                  object
fuel-type             object
aspiration            object
num-of-doors          object
body-style            object
drive-wheels          object
engine-location       object
wheel-base           float64
length               float64
width                float64
height               float64
curb-weight            int64
engine-type           object
num-of-cylinders      object
engine-size            int64
fuel-system           object
bore                 float64
stroke               float64
compression-ratio    float64
horsepower           float64
peak-rpm             float64
city-mpg               int64
highway-mpg            int64
price                float64
city-L/100km         float64
dtype: object
calculate the correlation between variables of type "int64" or "float64" using the method "corr"


df.corr()
Unnamed: 0	symboling	normalized-losses	wheel-base	length	width	height	curb-weight	engine-size	bore	stroke	compression-ratio	horsepower	peak-rpm	city-mpg	highway-mpg	price	city-L/100km
Unnamed: 0	1.000000	-0.162764	-0.241092	0.125517	0.161848	0.043976	0.252015	0.064820	-0.047764	0.244734	-0.162490	0.144301	-0.022474	-0.195942	0.027956	0.020344	-0.118214	-0.099157
symboling	-0.162764	1.000000	0.466264	-0.535987	-0.365404	-0.242423	-0.550160	-0.233118	-0.110581	-0.140019	-0.008153	-0.182196	0.075819	0.280635	-0.035527	0.036233	-0.082391	0.066171
normalized-losses	-0.241092	0.466264	1.000000	-0.056661	0.019424	0.086802	-0.373737	0.099404	0.112360	-0.029862	0.055045	-0.114713	0.217299	0.239544	-0.225016	-0.181877	0.133999	0.238567
wheel-base	0.125517	-0.535987	-0.056661	1.000000	0.876024	0.814507	0.590742	0.782097	0.572027	0.493244	0.158018	0.250313	0.371147	-0.360593	-0.470606	-0.543304	0.584642	0.476153
length	0.161848	-0.365404	0.019424	0.876024	1.000000	0.857170	0.492063	0.880665	0.685025	0.608971	0.123952	0.159733	0.579821	-0.286321	-0.665192	-0.698142	0.690628	0.657373
width	0.043976	-0.242423	0.086802	0.814507	0.857170	1.000000	0.306002	0.866201	0.729436	0.544885	0.188822	0.189867	0.615077	-0.245975	-0.633531	-0.680635	0.751265	0.673363
height	0.252015	-0.550160	-0.373737	0.590742	0.492063	0.306002	1.000000	0.307581	0.074694	0.180449	-0.060663	0.259737	-0.087027	-0.311574	-0.049800	-0.104812	0.135486	0.003811
curb-weight	0.064820	-0.233118	0.099404	0.782097	0.880665	0.866201	0.307581	1.000000	0.849072	0.644060	0.167438	0.156433	0.757976	-0.279375	-0.749543	-0.794889	0.834415	0.785353
engine-size	-0.047764	-0.110581	0.112360	0.572027	0.685025	0.729436	0.074694	0.849072	1.000000	0.572609	0.205928	0.028889	0.822676	-0.256773	-0.650546	-0.679571	0.872335	0.745059
bore	0.244734	-0.140019	-0.029862	0.493244	0.608971	0.544885	0.180449	0.644060	0.572609	1.000000	-0.055390	0.001263	0.566936	-0.267785	-0.582027	-0.591309	0.543155	0.554610
stroke	-0.162490	-0.008153	0.055045	0.158018	0.123952	0.188822	-0.060663	0.167438	0.205928	-0.055390	1.000000	0.187871	0.098267	-0.065272	-0.033956	-0.034636	0.082269	0.036133
compression-ratio	0.144301	-0.182196	-0.114713	0.250313	0.159733	0.189867	0.259737	0.156433	0.028889	0.001263	0.187871	1.000000	-0.214514	-0.436015	0.331425	0.268465	0.071107	-0.299372
horsepower	-0.022474	0.075819	0.217299	0.371147	0.579821	0.615077	-0.087027	0.757976	0.822676	0.566936	0.098267	-0.214514	1.000000	0.107882	-0.822214	-0.804575	0.809575	0.889488
peak-rpm	-0.195942	0.280635	0.239544	-0.360593	-0.286321	-0.245975	-0.311574	-0.279375	-0.256773	-0.267785	-0.065272	-0.436015	0.107882	1.000000	-0.115425	-0.058606	-0.101649	0.115819
city-mpg	0.027956	-0.035527	-0.225016	-0.470606	-0.665192	-0.633531	-0.049800	-0.749543	-0.650546	-0.582027	-0.033956	0.331425	-0.822214	-0.115425	1.000000	0.972044	-0.686571	-0.949713
highway-mpg	0.020344	0.036233	-0.181877	-0.543304	-0.698142	-0.680635	-0.104812	-0.794889	-0.679571	-0.591309	-0.034636	0.268465	-0.804575	-0.058606	0.972044	1.000000	-0.704692	-0.930028
price	-0.118214	-0.082391	0.133999	0.584642	0.690628	0.751265	0.135486	0.834415	0.872335	0.543155	0.082269	0.071107	0.809575	-0.101649	-0.686571	-0.704692	1.000000	0.789898
city-L/100km	-0.099157	0.066171	0.238567	0.476153	0.657373	0.673363	0.003811	0.785353	0.745059	0.554610	0.036133	-0.299372	0.889488	0.115819	-0.949713	-0.930028	0.789898	1.000000
Question #1:
Find the correlation : bore, stroke, compression-ratio, and horsepower.
Hint: if you would like to select those columns use the following syntax:
df[['bore','stroke' ,'compression-ratio','horsepower']]
Visualization
scatterplot of "engine-size" and "price"


# Engine size as potential predictor variable of price
sns.regplot(x="engine-size", y="price", data=df)
plt.ylim(0,)
/home/student/.local/lib/python3.5/site-packages/scipy/stats/stats.py:1713: FutureWarning: Using a non-tuple sequence for multidimensional indexing is deprecated; use `arr[tuple(seq)]` instead of `arr[seq]`. In the future this will be interpreted as an array index, `arr[np.array(seq)]`, which will result either in an error or a different result.
  return np.add.reduce(sorted[indexer] * weights, axis=axis) / sumval
(0, 56086.29733821679)

As the engine-size goes up, the price goes up


df[["engine-size", "price"]].corr()
engine-size	price
engine-size	1.000000	0.872335
price	0.872335	1.000000
correlation between 'engine-size' and 'price' is approximately 0.87


sns.regplot(x="highway-mpg", y="price", data=df)
/home/student/.local/lib/python3.5/site-packages/scipy/stats/stats.py:1713: FutureWarning: Using a non-tuple sequence for multidimensional indexing is deprecated; use `arr[tuple(seq)]` instead of `arr[seq]`. In the future this will be interpreted as an array index, `arr[np.array(seq)]`, which will result either in an error or a different result.
  return np.add.reduce(sorted[indexer] * weights, axis=axis) / sumval
<matplotlib.axes._subplots.AxesSubplot at 0x7f5a8f2aaeb8>

As the highway-mpg goes up, the price goes down

We can examine the correlation between 'highway-mpg' and 'price' and see it's approximately -0.704:


df[['highway-mpg', 'price']].corr()
highway-mpg	price
highway-mpg	1.000000	-0.704692
price	-0.704692	1.000000
Weak Linear Relationship

sns.regplot(x="peak-rpm", y="price", data=df)
/home/student/.local/lib/python3.5/site-packages/scipy/stats/stats.py:1713: FutureWarning: Using a non-tuple sequence for multidimensional indexing is deprecated; use `arr[tuple(seq)]` instead of `arr[seq]`. In the future this will be interpreted as an array index, `arr[np.array(seq)]`, which will result either in an error or a different result.
  return np.add.reduce(sorted[indexer] * weights, axis=axis) / sumval
<matplotlib.axes._subplots.AxesSubplot at 0x7f5a8f266d68>


df[['peak-rpm','price']].corr()
peak-rpm	price
peak-rpm	1.000000	-0.101649
price	-0.101649	1.000000
Question 3
Find the correlation between x="stroke", y="price". Describe the correlation

print(sns.regplot(x="stroke", y="price", data=df))
df[['stroke','price']].corr()
AxesSubplot(0.125,0.125;0.775x0.755)
/home/student/.local/lib/python3.5/site-packages/scipy/stats/stats.py:1713: FutureWarning: Using a non-tuple sequence for multidimensional indexing is deprecated; use `arr[tuple(seq)]` instead of `arr[seq]`. In the future this will be interpreted as an array index, `arr[np.array(seq)]`, which will result either in an error or a different result.
  return np.add.reduce(sorted[indexer] * weights, axis=axis) / sumval
stroke	price
stroke	1.000000	0.082269
price	0.082269	1.000000

Boxplots

df["body-style"].value_counts()
sedan          94
hatchback      68
wagon          25
hardtop         8
convertible     6
Name: body-style, dtype: int64

sns.boxplot(x="body-style", y="price", data=df)
<matplotlib.axes._subplots.AxesSubplot at 0x7f5a8f2f4390>


sns.boxplot(x="engine-location", y="price", data=df)
<matplotlib.axes._subplots.AxesSubplot at 0x7f5a8f3d8c18>


sns.boxplot(x="drive-wheels", y="price", data=df)
<matplotlib.axes._subplots.AxesSubplot at 0x1a0bf5ee80>

3. Descriptive Statistical Analysis

df.describe()
Unnamed: 0	symboling	normalized-losses	wheel-base	length	width	height	curb-weight	engine-size	bore	stroke	compression-ratio	horsepower	peak-rpm	city-mpg	highway-mpg	price	city-L/100km
count	201.000000	201.000000	201.00000	201.000000	201.000000	201.000000	201.000000	201.000000	201.000000	201.000000	197.000000	201.000000	201.000000	201.000000	201.000000	201.000000	201.000000	201.000000
mean	100.000000	0.840796	122.00000	98.797015	0.837102	0.915126	53.766667	2555.666667	126.875622	3.330692	3.256904	10.164279	103.405534	5117.665368	25.179104	30.686567	13207.129353	9.944145
std	58.167861	1.254802	31.99625	6.066366	0.059213	0.029187	2.447822	517.296727	41.546834	0.268072	0.319256	4.004965	37.365700	478.113805	6.423220	6.815150	7947.066342	2.534599
min	0.000000	-2.000000	65.00000	86.600000	0.678039	0.837500	47.800000	1488.000000	61.000000	2.540000	2.070000	7.000000	48.000000	4150.000000	13.000000	16.000000	5118.000000	4.795918
25%	50.000000	0.000000	101.00000	94.500000	0.801538	0.890278	52.000000	2169.000000	98.000000	3.150000	3.110000	8.600000	70.000000	4800.000000	19.000000	25.000000	7775.000000	7.833333
50%	100.000000	1.000000	122.00000	97.000000	0.832292	0.909722	54.100000	2414.000000	120.000000	3.310000	3.290000	9.000000	95.000000	5125.369458	24.000000	30.000000	10295.000000	9.791667
75%	150.000000	2.000000	137.00000	102.400000	0.881788	0.925000	55.500000	2926.000000	141.000000	3.580000	3.410000	9.400000	116.000000	5500.000000	30.000000	34.000000	16500.000000	12.368421
max	200.000000	3.000000	256.00000	120.900000	1.000000	1.000000	59.800000	4066.000000	326.000000	3.940000	4.170000	23.000000	262.000000	6600.000000	49.000000	54.000000	45400.000000	18.076923

df[['price']].describe()
price
count	201.000000
mean	13207.129353
std	7947.066342
min	5118.000000
25%	7775.000000
50%	10295.000000
75%	16500.000000
max	45400.000000

df.describe()

df.describe(include=['object'])
make	fuel-type	aspiration	num-of-doors	body-style	drive-wheels	engine-location	engine-type	num-of-cylinders	fuel-system
count	201	201	201	201	201	201	201	201	201	201
unique	22	2	2	2	5	3	2	6	7	8
top	toyota	gas	std	four	sedan	fwd	front	ohc	four	mpfi
freq	32	181	165	115	94	118	198	145	157	92
Value Counts

df['drive-wheels'].value_counts()
fwd    118
rwd     75
4wd      8
Name: drive-wheels, dtype: int64
Present as Dataframe :


df['drive-wheels'].value_counts().to_frame()
drive-wheels
fwd	118
rwd	75
4wd	8

drive_wheels_counts = df['drive-wheels'].value_counts().to_frame()
drive_wheels_counts.rename(columns={'drive-wheels': 'value_counts'}, inplace=True)
drive_wheels_counts
value_counts
fwd	118
rwd	75
4wd	8

drive_wheels_counts.index.name = 'drive-wheels'
drive_wheels_counts
value_counts
drive-wheels	
fwd	118
rwd	75
4wd	8

engine_loc_counts = df['engine-location'].value_counts().to_frame()
engine_loc_counts.rename(columns={'engine-location': 'value_counts'}, inplace=True)
engine_loc_counts.index.name = 'engine-location'
engine_loc_counts.head(10)
value_counts
engine-location	
front	198
rear	3
Grouping

df['drive-wheels'].value_counts().to_frame()
drive-wheels
fwd	118
rwd	75
4wd	8

df['drive-wheels'].unique()
array(['rwd', 'fwd', '4wd'], dtype=object)

df[['drive-wheels','body-style','price']]

df_group_one=df_group_one.groupby(['drive-wheels'],as_index= False).mean()
df_group_one
drive-wheels	price
0	4wd	10241.000000
1	fwd	9244.779661
2	rwd	19757.613333

df_group_one=df_group_one.groupby(['drive-wheels']).mean()
df_group_one
price
drive-wheels	
4wd	10241.000000
fwd	9244.779661
rwd	19757.613333

df_gptest=df[['drive-wheels','body-style','price']]
grouped_test1=df_gptest.groupby(['drive-wheels','body-style'],as_index= False).mean()
grouped_test1
drive-wheels	body-style	price
0	4wd	hatchback	7603.000000
1	4wd	sedan	12647.333333
2	4wd	wagon	9095.750000
3	fwd	convertible	11595.000000
4	fwd	hardtop	8249.000000
5	fwd	hatchback	8396.387755
6	fwd	sedan	9811.800000
7	fwd	wagon	9997.333333
8	rwd	convertible	23949.600000
9	rwd	hardtop	24202.714286
10	rwd	hatchback	14337.777778
11	rwd	sedan	21711.833333
12	rwd	wagon	16994.222222
